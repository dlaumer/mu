import{eN as b,G as E,r as d,aR as h,a6 as m,am as k,bh as F,jJ as C,b as $,t as c,i3 as A,gU as R,a8 as G,lH as _,bH as P,fR as x,h9 as H,aN as I,eS as O,e as n,y as l,a as Z,J as z,jP as L}from"./index.1c994251.js";import{p as M}from"./normalizeUtilsSync.e6a820d1.js";import{g as j}from"./FeatureStore.cebd9735.js";import{e as W}from"./QueryEngine.e5fa8c77.js";import{y as q}from"./elevationInfoUtils.8f2b572c.js";import{d as J,b as T}from"./DimensionAnalysisView3D.ef0a38bd.js";import{i as B,p as N}from"./queryEngineUtils.721c2648.js";import{r as f,a as U,n as v}from"./symbologySnappingCandidates.76cb252e.js";import"./BoundsStore.863b4bac.js";import"./PooledRBush.b3febf2a.js";import"./quickselect.2c5f2780.js";import"./optimizedFeatureQueryEngineAdapter.489d0347.js";import"./centroid.ea6923ab.js";import"./QueryEngineResult.e9614097.js";import"./WhereClause.95780840.js";import"./executionError.c4c51b90.js";import"./utils.191860e4.js";import"./generateRendererUtils.5f47c7a6.js";import"./json.5152e73f.js";import"./QueryEngineCapabilities.ea616409.js";import"./LineVisualElement.b0a2a80c.js";import"./LengthDimension.31de8201.js";import"./Segment.3d26290b.js";import"./analysisViewUtils.a4fb7d89.js";import"./ImageMaterial.abe325ce.js";import"./Factory.4bd33bc5.js";import"./RightAngleQuadVisualElement.38896557.js";import"./VisualElementResources.7e7e33cb.js";import"./PointVisualElement.ccd4241a.js";import"./EditGeometryOperations.0a24ed32.js";import"./dehydratedFeatureComparison.e916f0d8.js";import"./RenderTexture.fd243b89.js";import"./VertexSnappingCandidate.76a04409.js";const S="graphics-collections";let a=class extends b(E){get updating(){return this.updatingHandles.updating}get _hasZ(){const e=this.view;return d(e)&&e.type==="3d"&&this.layerSource.layer.type!=="map-notes"}get _snappingElevationAligner(){const{view:e}=this,{layer:t}=this.layerSource,i=d(e)&&e.type==="3d";if(!i||t.type==="map-notes")return f();const s=async(o,r)=>(await z(e.whenLayerView(t),r)).elevationAlignPointsInFeatures(o,r);return f(i,{elevationInfo:t.elevationInfo,alignPointsInFeatures:s,spatialReference:e.spatialReference})}get _snappingElevationFilter(){const{view:e}=this,t=d(e)&&e.type==="3d"&&this.layerSource.layer.type!=="map-notes";return U(t)}get _symbologySnappingFetcher(){const{view:e}=this,{layer:t}=this.layerSource,i=d(e)&&e.type==="3d",s=this._extrudedPolygonSymbolsCount>0;return i&&t.type!=="map-notes"&&s?v(s,async(o,r)=>{const p=await e.whenLayerView(t);return h(r),p.queryForSymbologySnapping({candidates:o,spatialReference:e.spatialReference},r)}):v()}constructor(e){super(e),this.availability=1,this._sources={multipoint:null,point:null,polygon:null,polyline:null},this._loadedWkids=new Set,this._loadedWkts=new Set,this._pendingAdds=[],this._extrudedPolygonSymbolsCount=0}destroy(){for(const e of this._pendingAdds)e.task.abort();this._pendingAdds.length=0,this._mapSources(e=>this._destroySource(e))}initialize(){this.updatingHandles.add(()=>this.getGraphicsLayers(),i=>{this.updatingHandles.removeHandles(S);for(const s of i)this._addMany(s.graphics.toArray()),this.handles.add([s.on("graphic-update",o=>this._onGraphicUpdate(o)),this.updatingHandles.addOnCollectionChange(()=>s.graphics,o=>this._onGraphicsChanged(o))],S)},m);const{view:e}=this,{layer:t}=this.layerSource;d(e)&&e.type==="3d"&&t.type!=="map-notes"&&this.addHandles([e.elevationProvider.on("elevation-change",({context:i})=>{q(i,t.elevationInfo)&&this._snappingElevationAligner.notifyElevationSourceChange()}),k(()=>t.elevationInfo,()=>this._snappingElevationAligner.notifyElevationSourceChange(),m),F(()=>t,["edits","apply-edits","graphic-update"],()=>this._symbologySnappingFetcher.notifySymbologyChange())])}async fetchCandidates(e,t){const{point:i}=e,s=await C(this._mapSources(p=>this._fetchCandidatesForSource(p,e,t)));h(t);const o=this._getGroundElevation,r=s.flat().map(p=>B(p,o));return J(i,r),r}get _getGroundElevation(){return N(this.view)}async _fetchCandidatesForSource(e,t,i){var y,g;const s=T(t,(g=(y=$(this.view))==null?void 0:y.type)!=null?g:"2d"),o=await e.queryEngine.executeQueryForSnapping(s,i);h(i);const r=await this._snappingElevationAligner.alignCandidates(o.candidates,i);h(i);const p=await this._symbologySnappingFetcher.fetch(r,i);h(i);const w=p.length===0?r:[...r,...p];return this._snappingElevationFilter.filter(s,w)}refresh(){}_onGraphicUpdate(e){if(this.getGraphicsLayers().some(t=>t.graphics.includes(e.graphic)))switch(e.property){case"geometry":case"visible":this._remove(e.graphic),this._addMany([e.graphic])}}_onGraphicsChanged(e){for(const t of e.removed)this._remove(t);this._addMany(e.added)}_addMany(e){const t=[],i=new Map;for(const s of e)c(s.geometry)||(this._needsInitializeProjection(s.geometry.spatialReference)?(t.push(s.geometry.spatialReference),i.set(s.uid,s)):this._add(s));this._createPendingAdd(t,i)}_createPendingAdd(e,t){if(!e.length)return;const i=A(async r=>{await R(e.map(p=>({source:p,dest:this.spatialReference})),{signal:r}),this._markLoadedSpatialReferences(e);for(const[,p]of t)this._add(p)});this.updatingHandles.addPromise(i.promise);const s={task:i,graphics:t},o=()=>L(this._pendingAdds,s);i.promise.then(o,o),this._pendingAdds.push(s)}_markLoadedSpatialReferences(e){for(const t of e)t.wkid!=null&&this._loadedWkids.add(t.wkid),t.wkt!=null&&this._loadedWkts.add(t.wkt)}_add(e){if(c(e.geometry)||!e.visible)return;let t=e.geometry;if(t.type==="mesh")return;t.type==="extent"&&(t=G.fromExtent(t));const i=this._ensureSource(t.type);if(c(i))return;const s=this._createOptimizedFeature(e.uid,t);c(s)||(i.featureStore.add(s),_(e.symbol)&&this._extrudedPolygonSymbolsCount++)}_needsInitializeProjection(e){return(e.wkid==null||!this._loadedWkids.has(e.wkid))&&(e.wkt==null||!this._loadedWkts.has(e.wkt))&&!P(e,this.spatialReference)}_createOptimizedFeature(e,t){const i=x(M(t),this.spatialReference);if(!i)return null;const s=this._ensureGeometryHasZ(i),o=H(s,this._hasZ,!1);return new I(o,{[u]:e},null,e)}_ensureGeometryHasZ(e){var s;if(!this._hasZ)return e;const t=o=>{for(;o.length<3;)o.push(0)},i=e.clone();switch(i.hasZ=!0,i.type){case"point":i.z=(s=i.z)!=null?s:0;break;case"multipoint":i.points.forEach(t);break;case"polyline":i.paths.forEach(o=>o.forEach(t));break;case"polygon":i.rings.forEach(o=>o.forEach(t))}return i}_ensureSource(e){const t=this._sources[e];if(d(t))return t;const i=this._createSource(e);return this._sources[e]=i,i}_createSource(e){const t=O.toJSON(e),i=this._hasZ,s=new j({geometryType:t,hasZ:i,hasM:!1});return{featureStore:s,queryEngine:new W({featureStore:s,fields:[{name:u,type:"esriFieldTypeOID",alias:u}],geometryType:t,hasM:!1,hasZ:i,objectIdField:u,spatialReference:this.spatialReference,scheduler:d(this.view)&&this.view.type==="3d"?this.view.resourceController.scheduler:null}),type:e}}_remove(e){this._mapSources(t=>this._removeFromSource(t,e));for(const t of this._pendingAdds)t.graphics.delete(e.uid),t.graphics.size===0&&t.task.abort()}_removeFromSource(e,t){const i=t.uid;e.featureStore.has(i)&&(e.featureStore.removeById(t.uid),_(t.symbol)&&this._extrudedPolygonSymbolsCount--)}_destroySource(e){e.queryEngine.destroy(),this._sources[e.type]=null}_mapSources(e){const{point:t,polygon:i,polyline:s,multipoint:o}=this._sources,r=[];return d(t)&&r.push(e(t)),d(i)&&r.push(e(i)),d(s)&&r.push(e(s)),d(o)&&r.push(e(o)),r}};n([l()],a.prototype,"getGraphicsLayers",void 0),n([l({constructOnly:!0})],a.prototype,"layerSource",void 0),n([l({constructOnly:!0})],a.prototype,"spatialReference",void 0),n([l({constructOnly:!0})],a.prototype,"view",void 0),n([l({readOnly:!0})],a.prototype,"updating",null),n([l({readOnly:!0})],a.prototype,"availability",void 0),n([l()],a.prototype,"_hasZ",null),n([l()],a.prototype,"_snappingElevationAligner",null),n([l()],a.prototype,"_snappingElevationFilter",null),n([l()],a.prototype,"_symbologySnappingFetcher",null),n([l()],a.prototype,"_extrudedPolygonSymbolsCount",void 0),n([l()],a.prototype,"_getGroundElevation",null),a=n([Z("esri.views.interactive.snapping.featureSources.GraphicsSnappingSource")],a);const u="OBJECTID";export{a as GraphicsSnappingSource};
