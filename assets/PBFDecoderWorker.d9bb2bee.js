import{nN as d,iJ as c,i as p,c1 as f,ho as y,nO as _,nF as m,fW as g,nP as P,nQ as C,nR as b}from"./index.f0b603e5.js";function G(n,e){return e}function l(n,e,r,t){switch(r){case 0:return h(n,e+t,0);case 1:return n.originPosition==="lowerLeft"?h(n,e+t,1):R(n,e+t,1)}}function u(n,e,r,t){return r===2?h(n,e,2):l(n,e,r,t)}function v(n,e,r,t){return r===2?h(n,e,3):l(n,e,r,t)}function M(n,e,r,t){return r===3?h(n,e,3):u(n,e,r,t)}function h({translate:n,scale:e},r,t){return n[t]+r*e[t]}function R({translate:n,scale:e},r,t){return n[t]-r*e[t]}class T{constructor(e){this._options=e,this.geometryTypes=["point","multipoint","polyline","polygon"],this._previousCoordinate=[0,0],this._transform=null,this._applyTransform=G,this._lengths=[],this._currentLengthIndex=0,this._toAddInCurrentPath=0,this._vertexDimension=0,this._coordinateBuffer=null,this._coordinateBufferPtr=0,this._attributesConstructor=class{}}createFeatureResult(){return new d}finishFeatureResult(e){if(this._options.applyTransform&&(e.transform=null),this._attributesConstructor=class{},this._coordinateBuffer=null,this._lengths.length=0,!e.hasZ)return;const r=c(e.geometryType,this._options.sourceSpatialReference,e.spatialReference);if(!p(r))for(const t of e.features)r(t.geometry)}createSpatialReference(){return new f}addField(e,r){e.fields.push(y.fromJSON(r));const t=e.fields.map(s=>s.name);this._attributesConstructor=function(){for(const s of t)this[s]=null}}addFeature(e,r){const t=this._options.maxStringAttributeLength?this._options.maxStringAttributeLength:0;if(t>0)for(const s in r.attributes){const o=r.attributes[s];typeof o=="string"&&o.length>t&&(r.attributes[s]="")}e.features.push(r)}addQueryGeometry(e,r){const{queryGeometry:t,queryGeometryType:s}=r,o=_(t.clone(),t,!1,!1,this._transform),a=m(o,s,!1,!1);let i=null;switch(s){case"esriGeometryPoint":i="point";break;case"esriGeometryPolygon":i="polygon";break;case"esriGeometryPolyline":i="polyline";break;case"esriGeometryMultipoint":i="multipoint"}a.type=i,e.queryGeometryType=s,e.queryGeometry=a}prepareFeatures(e){var r;switch(this._transform=(r=e.transform)!=null?r:null,this._options.applyTransform&&e.transform&&(this._applyTransform=this._deriveApplyTransform(e)),this._vertexDimension=2,e.hasZ&&this._vertexDimension++,e.hasM&&this._vertexDimension++,e.geometryType){case"point":this.addCoordinate=(t,s,o)=>this.addCoordinatePoint(t,s,o),this.createGeometry=t=>this.createPointGeometry(t);break;case"polygon":this.addCoordinate=(t,s,o)=>this._addCoordinatePolygon(t,s,o),this.createGeometry=t=>this._createPolygonGeometry(t);break;case"polyline":this.addCoordinate=(t,s,o)=>this._addCoordinatePolyline(t,s,o),this.createGeometry=t=>this._createPolylineGeometry(t);break;case"multipoint":this.addCoordinate=(t,s,o)=>this._addCoordinateMultipoint(t,s,o),this.createGeometry=t=>this._createMultipointGeometry(t);break;case"mesh":case"extent":break;default:g(e.geometryType)}}createFeature(){return this._lengths.length=0,this._currentLengthIndex=0,this._previousCoordinate[0]=0,this._previousCoordinate[1]=0,new P(C(),null,new this._attributesConstructor)}allocateCoordinates(){const e=this._lengths.reduce((r,t)=>r+t,0);this._coordinateBuffer=new Float64Array(e*this._vertexDimension),this._coordinateBufferPtr=0}addLength(e,r){this._lengths.length===0&&(this._toAddInCurrentPath=r),this._lengths.push(r)}createPointGeometry(e){const r={type:"point",x:0,y:0,spatialReference:e.spatialReference,hasZ:!!e.hasZ,hasM:!!e.hasM};return r.hasZ&&(r.z=0),r.hasM&&(r.m=0),r}addCoordinatePoint(e,r,t){const s=this._transform?this._applyTransform(this._transform,r,t,0):r;if(s!=null)switch(t){case 0:e.x=s;break;case 1:e.y=s;break;case 2:e.hasZ?e.z=s:e.m=s;break;case 3:e.m=s}}_transformPathLikeValue(e,r){let t=0;return r<=1&&(t=this._previousCoordinate[r],this._previousCoordinate[r]+=e),this._transform?this._applyTransform(this._transform,e,r,t):e}_addCoordinatePolyline(e,r,t){this._dehydratedAddPointsCoordinate(e.paths,r,t)}_addCoordinatePolygon(e,r,t){this._dehydratedAddPointsCoordinate(e.rings,r,t)}_addCoordinateMultipoint(e,r,t){t===0&&e.points.push([]);const s=this._transformPathLikeValue(r,t);e.points[e.points.length-1].push(s)}_createPolygonGeometry(e){return{type:"polygon",rings:[[]],spatialReference:e.spatialReference,hasZ:!!e.hasZ,hasM:!!e.hasM}}_createPolylineGeometry(e){return{type:"polyline",paths:[[]],spatialReference:e.spatialReference,hasZ:!!e.hasZ,hasM:!!e.hasM}}_createMultipointGeometry(e){return{type:"multipoint",points:[],spatialReference:e.spatialReference,hasZ:!!e.hasZ,hasM:!!e.hasM}}_dehydratedAddPointsCoordinate(e,r,t){t===0&&this._toAddInCurrentPath--==0&&(e.push([]),this._toAddInCurrentPath=this._lengths[++this._currentLengthIndex]-1,this._previousCoordinate[0]=0,this._previousCoordinate[1]=0);const s=this._transformPathLikeValue(r,t),o=e[e.length-1],a=this._coordinateBuffer;if(a){if(t===0){const i=this._coordinateBufferPtr*Float64Array.BYTES_PER_ELEMENT;o.push(new Float64Array(a.buffer,i,this._vertexDimension))}a[this._coordinateBufferPtr++]=s}}_deriveApplyTransform(e){const{hasZ:r,hasM:t}=e;return r&&t?M:r?u:t?v:l}}class x{_parseFeatureQuery(e){var s;const r=b(e.buffer,new T(e.options)),t={...r,spatialReference:(s=r.spatialReference)==null?void 0:s.toJSON(),fields:r.fields?r.fields.map(o=>o.toJSON()):void 0};return Promise.resolve(t)}}function w(){return new x}export{w as default};
