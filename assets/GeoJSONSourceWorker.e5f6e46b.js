import{h2 as _,dz as S,d as I,g_ as C,qw as $,hW as Q,al as v,O as G,bB as M,r as F,h0 as P,D as Z,U as A,fc as R,r1 as z,r2 as N,r3 as B}from"./index.f0143bd6.js";import{g as L}from"./FeatureStore.368a7cb3.js";import{f as b,g as w}from"./QueryEngineResult.d691c7bb.js";import{e as U}from"./QueryEngine.5f539ff5.js";import{L as W,I as J,T as V}from"./geojson.1c3ff5a0.js";import{o as H,a as Y,i as K}from"./clientSideDefaults.c93b26c1.js";import{w as X,m as T,f as j,a as E,g as O}from"./sourceUtils.21bc8349.js";import"./BoundsStore.d65199ec.js";import"./PooledRBush.3515f326.js";import"./quickselect.2c5f2780.js";import"./optimizedFeatureQueryEngineAdapter.80f55770.js";import"./centroid.869e75fe.js";import"./WhereClause.48310df0.js";import"./executionError.c4c51b90.js";import"./utils.ecbb20c7.js";import"./generateRendererUtils.fcfe376e.js";import"./json.5152e73f.js";import"./QueryEngineCapabilities.ea616409.js";const ee={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsQueryWithDistance:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsQueryWithResultType:!1,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0}};class Ee{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){var e;(e=this._queryEngine)==null||e.destroy(),this._queryEngine=this._fieldsIndex=this._createDefaultAttributes=null}async load(e,t={}){this._loadOptions={url:e.url,customParameters:e.customParameters};const i=[];await this._checkProjection(e.spatialReference);let s=null;e.url&&(s=await this._fetch(t==null?void 0:t.signal));const n=W(s,{geometryType:e.geometryType}),a=e.fields||n.fields||[],l=e.hasZ!=null?e.hasZ:n.hasZ,d=n.geometryType;let h=e.objectIdField||n.objectIdFieldName||"__OBJECTID";const m=e.spatialReference||_;let o=e.timeInfo;a===n.fields&&n.unknownFields.length>0&&i.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:n.unknownFields}});let r=new S(a).get(h);r?(r.type!=="esriFieldTypeString"&&(r.type="esriFieldTypeOID"),r.editable=!1,r.nullable=!1,h=r.name):(r={alias:h,name:h,type:n.objectIdFieldType==="string"?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},a.unshift(r));const c={};for(const u of a){if(u.name==null&&(u.name=u.alias),u.alias==null&&(u.alias=u.name),!u.name)throw new I("geojson-layer:invalid-field-name","field name is missing",{field:u});if(!C.jsonValues.includes(u.type))throw new I("geojson-layer:invalid-field-type",`invalid type for field "${u.name}"`,{field:u});if(u.name!==r.name){const g=$(u);g!==void 0&&(c[u.name]=g)}}this._fieldsIndex=new S(a);const y=this._fieldsIndex.requiredFields.indexOf(r);if(y>-1&&this._fieldsIndex.requiredFields.splice(y,1),o){if(o.startTimeField){const u=this._fieldsIndex.get(o.startTimeField);u?(o.startTimeField=u.name,u.type="esriFieldTypeDate"):o.startTimeField=null}if(o.endTimeField){const u=this._fieldsIndex.get(o.endTimeField);u?(o.endTimeField=u.name,u.type="esriFieldTypeDate"):o.endTimeField=null}if(o.trackIdField){const u=this._fieldsIndex.get(o.trackIdField);u?o.trackIdField=u.name:(o.trackIdField=null,i.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:o}}))}o.startTimeField||o.endTimeField||(i.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:o}}),o=null)}const p=d?H(d):void 0,f={warnings:i,featureErrors:[],layerDefinition:{...ee,drawingInfo:p!=null?p:void 0,templates:Y(c),extent:void 0,geometryType:d,objectIdField:h,fields:a,hasZ:!!l,timeInfo:o}};this._queryEngine=new U({fields:a,geometryType:d,hasM:!1,hasZ:l,objectIdField:h,spatialReference:m,timeInfo:o,featureStore:new L({geometryType:d,hasM:!1,hasZ:l}),cacheSpatialQueries:!0}),this._createDefaultAttributes=K(c,h);const q=await this._createFeatures(s);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,q);const k=this._normalizeFeatures(q,f.warnings,f.featureErrors);this._queryEngine.featureStore.addMany(k);const{fullExtent:D,timeExtent:x}=await this._queryEngine.fetchRecomputedExtents();if(f.layerDefinition.extent=D,x){const{start:u,end:g}=x;f.layerDefinition.timeInfo.timeExtent=[u,g]}return f}async applyEdits(e){const{spatialReference:t,geometryType:i}=this._queryEngine;return await Promise.all([X(t,i),b(e.adds,t),b(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(e,t.signal)}async refresh(e){var s;this._loadOptions.customParameters=e,(s=this._snapshotTask)==null||s.abort(),this._snapshotTask=Q(this._snapshotFeatures),this._snapshotTask.promise.then(n=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,n);const a=this._normalizeFeatures(n);a&&this._queryEngine.featureStore.addMany(a)},n=>{this._queryEngine.featureStore.clear(),v(n)||G.getLogger("esri.layers.GeoJSONLayer").error(new I("geojson-layer:refresh","An error occurred during refresh",{error:n}))}),await this._waitSnapshotComplete();const{fullExtent:t,timeExtent:i}=await this._queryEngine.fetchRecomputedExtents();return{extent:t,timeExtent:i}}async _createFeatures(e){if(e==null)return[];const{geometryType:t,hasZ:i,objectIdField:s}=this._queryEngine,n=J(e,{geometryType:t,hasZ:i,objectIdField:s});if(!M(this._queryEngine.spatialReference,_))for(const a of n)F(a.geometry)&&(a.geometry=P(w(Z(a.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),_,this._queryEngine.spatialReference)));return n}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(e){const{url:t,customParameters:i}=this._loadOptions,s=(await A(t,{responseType:"json",query:{...i},signal:e})).data;return await V(s),s}_normalizeFeatures(e,t,i){const{objectIdField:s}=this._queryEngine,n=[];for(const a of e){const l=this._createDefaultAttributes(),d=T(this._fieldsIndex,l,a.attributes,!0,t);d?i==null||i.push(d):(this._assignObjectId(l,a.attributes,!0),a.attributes=l,a.objectId=l[s],n.push(a))}return n}async _applyEdits(e){const{adds:t,updates:i,deletes:s}=e,n={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t&&t.length&&this._applyAddEdits(n,t),i&&i.length&&this._applyUpdateEdits(n,i),s&&s.length){for(const d of s)n.deleteResults.push(j(d));this._queryEngine.featureStore.removeManyById(s)}const{fullExtent:a,timeExtent:l}=await this._queryEngine.fetchRecomputedExtents();return{extent:a,timeExtent:l,featureEditResults:n}}_applyAddEdits(e,t){var o;const{addResults:i}=e,{geometryType:s,hasM:n,hasZ:a,objectIdField:l,spatialReference:d,featureStore:h}=this._queryEngine,m=[];for(const r of t){if(r.geometry&&s!==R(r.geometry)){i.push(E("Incorrect geometry type."));continue}const c=this._createDefaultAttributes(),y=T(this._fieldsIndex,c,r.attributes);if(y)i.push(y);else{if(this._assignObjectId(c,r.attributes),r.attributes=c,r.uid!=null){const p=r.attributes[l];e.uidToObjectId[r.uid]=p}if(F(r.geometry)){const p=(o=r.geometry.spatialReference)!=null?o:d;r.geometry=w(O(r.geometry,p),p,d)}m.push(r),i.push(j(r.attributes[l]))}}h.addMany(z([],m,s,a,n,l))}_applyUpdateEdits({updateResults:e},t){var h;const{geometryType:i,hasM:s,hasZ:n,objectIdField:a,spatialReference:l,featureStore:d}=this._queryEngine;for(const m of t){const{attributes:o,geometry:r}=m,c=o&&o[a];if(c==null){e.push(E(`Identifier field ${a} missing`));continue}if(!d.has(c)){e.push(E(`Feature with object id ${c} missing`));continue}const y=N(d.getFeature(c),i,n,s);if(F(r)){if(i!==R(r)){e.push(E("Incorrect geometry type."));continue}const p=(h=r.spatialReference)!=null?h:l;y.geometry=w(O(r,p),p,l)}if(o){const p=T(this._fieldsIndex,y.attributes,o);if(p){e.push(p);continue}}d.add(B(y,i,n,s,a)),e.push(j(c))}}_createObjectIdGenerator(e,t){const i=e.fieldsIndex.get(e.objectIdField);if(i.type==="esriFieldTypeString")return()=>i.name+"-"+Date.now().toString(16);let s=Number.NEGATIVE_INFINITY;for(const n of t)n.objectId&&(s=Math.max(s,n.objectId));return s=Math.max(0,s)+1,()=>s++}_assignObjectId(e,t,i=!1){const s=this._queryEngine.objectIdField;e[s]=i&&s in t?t[s]:this._objectIdGenerator()}async _checkProjection(e){try{await b(_,e)}catch{throw new I("geojson-layer","Projection not supported")}}}export{Ee as default};
