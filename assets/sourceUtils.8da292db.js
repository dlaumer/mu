import{gs as p,hj as y,nJ as w,nK as I,nL as b,gH as h,i as g,bo as _}from"./index.f0b603e5.js";class v{constructor(){this.code=null,this.description=null}}class q{constructor(t){this.error=new v,this.globalId=null,this.objectId=null,this.success=!1,this.uniqueId=null,this.error.description=t}}function f(e){return new q(e)}class P{constructor(t){this.globalId=null,this.success=!0,this.objectId=this.uniqueId=t}}function F(e){return new P(e)}const l=new Set;function G(e,t,i,m=!1,u){var c;l.clear();for(const s in i){const n=e.get(s);if(!n)continue;const a=i[s],r=j(n,a);if(r!==a&&u&&u.push({name:"invalid-value-type",message:"attribute value was converted to match the field type",details:{field:n,originalValue:a,sanitizedValue:r}}),l.add(n.name),n&&(m||n.editable)){const d=I(n,r);if(d)return f(b(d,n,r));t[n.name]=r}}for(const s of(c=e==null?void 0:e.requiredFields)!=null?c:[])if(!l.has(s.name))return f(`missing required field "${s.name}"`);return null}function j(e,t){let i=t;return typeof t=="string"&&p(e)?i=parseFloat(t):t!=null&&y(e)&&typeof t!="string"&&(i=String(t)),w(i)}let o;function L(e,t){if(!e||!h(t))return e;if("rings"in e||"paths"in e){if(g(o))throw new TypeError("geometry engine not loaded");return o.simplify(t,e)}return e}async function E(){return g(o)&&(o=await _(()=>import("./geometryEngineJSON.7ef32ff7.js"),["assets/geometryEngineJSON.7ef32ff7.js","assets/geometryEngineBase.871c2f6a.js","assets/geometryEngineJSON.7d40f72f.js","assets/json.5152e73f.js"])),o}async function S(e,t){!h(e)||t!=="esriGeometryPolygon"&&t!=="esriGeometryPolyline"||await E()}export{f as a,F as f,L as g,G as m,S as w};
